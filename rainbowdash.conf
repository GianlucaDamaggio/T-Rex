/*
 * -------------------------------------------------
 *  GianlucaDamaggio/Rainbowdash Nextflow config file
 * -------------------------------------------------
 */
 
params {
    //Sample sheet in tsv format containing sample_name, condition, path to fastq file and barcode
    sampleSheet = "/path/to/samples.tsv"
    //Directory containing scripts for Instability computation
    scriptsDir = "/path/to/scripts"
    //Path to a folder where results are stored
    resultsDir = "/path/to/results"
    //Reference fasta file
    referenceFile= "/path/to/reference.fasta"
    //Path to bed file for Straglr STR sizing
    bedFile = "/path/to/file.bed"
    //Day in sample sheet used for adjusting the Instability Index
    dayNorm=0                                                               
    //Minimum barcode alignment length
    minAlLength=13
    //Minimum query coverage for aligned reads                                                         
    queryCovThr=0.7
    //Flag for filtering reads based on barcode identification                                                           
    barcodeFilter="Y"
    //Format for reporting STR length, choose between 'nCAG' or 'length'                                                         
    countFormat='nCAG'
    //threshold for noise filtering in Instability Index
    threshold="0, 10, 15, 20"
    //targetChr
    targetChr="4"

    help = false

    // Flags to select which process to run
    barcodeFiltering = true
    alignment = true
    STRSizing = true
    instabilityComputation = true
}

profiles {
	singularity {
	    singularity.enabled = true
	    singularity.autoMounts = false
	    //singularity.cacheDir = "/path/to/singularity/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'slurm' // set to 'local' if you are not using a queue management system
	    queue = 'ulow'
	    perJobMemLimit = true
	    queueStatInterval = '1 ms'
	    pollInterval = '1 ms'
	    container = 'gianlucadamaggio/rainbowdash:latest'
	    containerOptions = '--bind /home:/home' // adjust according to which directory you wish to make accessible to singularity

	    withName:barcodeFiltering {
	    	cpus = { params.barcodeFiltering ? 4 : 1 }
	    	memory = { params.barcodeFiltering ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:alignment {
	    	cpus = { params.alignment ? 4 : 1 }
	    	memory = { params.alignment ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:STRSizing {
	    	cpus = { params.STRSizing ? 4 : 1 }
	    	memory = { params.STRSizing ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:instabilityComputation {
	    	cpus = { params.instabilityComputation ? 4 : 1 }
	    	memory = { params.instabilityComputation ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    }
    }
    docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'local'
        container = 'gianlucadamaggio/rainbowdash:latest'
	    containerOptions = '-v /home/:/home/' // adjust according to which directory you wish to make accessible to docker

	    withName:barcodeFiltering {
	    	cpus = { params.barcodeFiltering ? 4 : 1 }
	    	memory = { params.barcodeFiltering ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:alignment {
	    	cpus = { params.alignment ? 4 : 1 }
	    	memory = { params.alignment ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:STRSizing {
	    	cpus = { params.STRSizing ? 4 : 1 }
	    	memory = { params.STRSizing ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:instabilityComputation {
	    	cpus = { params.instabilityComputation ? 4 : 1 }
	    	memory = { params.instabilityComputation ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
        }
    }    
}

tower {
	enabled = false
	endpoint = '-'
	accessToken = 'insert access token'
}